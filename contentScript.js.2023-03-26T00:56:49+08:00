async function fetchIPInfoIO() {
  const response = await fetch('https://ipinfo.io/json', {
    mode: 'cors',
    credentials: 'omit'
  });

  if (!response.ok) {
    throw new Error(`HTTP error: ${response.status}`);
  }

  const data = await response.json();
  return {
    ip: data.ip,
    country: data.country,
    region: data.region
  };
}

async function fetchIPGeolocationIO() {
  const apiKey = 'YOUR_API_KEY';
  const response = await fetch(`https://api.ipgeolocation.io/ipgeo?apiKey=9d0a25984a2140ffb3b6e146bd1d21bc`, {
    mode: 'cors',
    credentials: 'omit'
  });

  if (!response.ok) {
    throw new Error(`HTTP error: ${response.status}`);
  }

  const data = await response.json();
  return {
    ip: data.ip,
    country: data.country_code2,
    region: data.state_prov
  };
}

async function fetchPublicIP() {
  try {
    const data = await Promise.race([
      fetchIPInfoIO(),
      new Promise((_, reject) =>
        setTimeout(() => reject(new Error('Timeout')), 1000)
      ),
    ]);
    displayIP(data.ip, data.country, data.region);
  } catch (error) {
    console.warn('Error fetching IP from primary services:', error);

    try {
      const data = await fetchIPGeolocationIO();
      displayIP(data.ip, data.country, data.region);
    } catch (error) {
      console.error('Error fetching IP from secondary services:', error);
      displayIP('Error: Unable to fetch IP', '', '');
    }
  }
}

function displayIP(ip, country, region) {
  const ipDiv = document.createElement('div');
  ipDiv.id = 'publicIPDisplay';
  ipDiv.textContent = `${ip}, ${country}, ${region}`;
  ipDiv.style.cursor = 'pointer';
  ipDiv.title = 'Click to close';
  ipDiv.addEventListener('click', () => {
    ipDiv.remove();
  });
  document.body.appendChild(ipDiv);
}

window.addEventListener('load', fetchPublicIP);

